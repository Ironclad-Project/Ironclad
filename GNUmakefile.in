#  GNUmakefile.in: Standard-complying wrapper for gprbuild and install.
#  Copyright (C) 2025 streaksu
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Nuke built-in rules.
.SUFFIXES:

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
override MKESCAPE = $(subst $(SPACE),\ ,$(1))
override SHESCAPE = $(subst ','\'',$(1))

# Import some autoconf variables as make variables.
override SRCDIR := @SRCDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := $(PACKAGE_TARNAME)
override DIST_OUTPUT := $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)

# Take care of reproducible dates.
override SOURCE_DATE_EPOCH := @SOURCE_DATE_EPOCH@
export SOURCE_DATE_EPOCH

# Autoconf dir variables.
override prefix := @prefix@
override datarootdir := @datarootdir@
override infodir := @infodir@

# Generator executables.
MKDIR_P := @MKDIR_P@
INSTALL := @INSTALL@
INSTALL_DATA := @INSTALL_DATA@
GREP := @GREP@
SED := @SED@
MAKEINFO := @MAKEINFO@
TEXI2HTML := @TEXI2HTML@
TEXI2DVI := @TEXI2DVI@
GPRBUILD := @GPRBUILD@
GNATPROVE := @GNATPROVE@
TYPOS := @TYPOS@
STRIP := @STRIP@

# Target information.
override CC := @CC@
override GPRBUILD_TARGET := $(shell $(CC) -dumpmachine)
override host_cpu := @host_cpu@
override PLATFORM := @PLATFORM@

# Attempt to get the job count from the make command line.
override PARALLELISM := $(shell ps T | $(SED) -E -n 's%.*'$$PPID'.*$(MAKE).* (-j *|--jobs( +|=))([0-9]+).*%\3%p')
ifeq ($(PARALLELISM),)
    override PARALLELISM := 1
endif

# Get a list of Ada source files to determine when to rebuild.
override RTSFILES := $(shell find -L '$(call SHESCAPE,$(SRCDIR))/source/rts' -type f | $(SED) 's| |\\ |g')
override ADAFILES := $(shell find -L '$(call SHESCAPE,$(SRCDIR))/source' -type f | $(GREP) -v rts | $(SED) 's| |\\ |g')

###############################################################################
# Rules for generating executables, documentation, and other artifacts.
.PHONY: all
all: $(OUTPUT) info

rtsdir/adalib/libgnat.a: GNUmakefile $(RTSFILES)
	rm -rf rtsdir
	$(MKDIR_P) rtsdir/adalib
	$(MKDIR_P) rtsdir/adainclude
	cp '$(call SHESCAPE,$(SRCDIR))'/source/rts/*.adb rtsdir/adainclude/
	cp '$(call SHESCAPE,$(SRCDIR))'/source/rts/*.ads rtsdir/adainclude/
	cp '$(call SHESCAPE,$(SRCDIR))'/source/rts/$(host_cpu)-$(PLATFORM)/*.ads rtsdir/adainclude/
	$(GPRBUILD) -P ./rts.gpr \
		--target=$(GPRBUILD_TARGET) --db- --db ./gprconfig \
		-j$(PARALLELISM)

$(OUTPUT): GNUmakefile rtsdir/adalib/libgnat.a $(ADAFILES)
	$(GPRBUILD) -P ./ironclad.gpr \
		--RTS=./rtsdir --target=$(GPRBUILD_TARGET) --db- --db ./gprconfig \
		-j$(PARALLELISM)

.PHONY: info
info: ironclad.info

ironclad.info: $(call MKESCAPE,$(SRCDIR))/docs/ironclad.texi GNUmakefile
	$(MAKEINFO) '$(call SHESCAPE,$<)' -o $@

.PHONY: html
html: ironclad.html

ironclad.html: $(call MKESCAPE,$(SRCDIR))/docs/ironclad.texi GNUmakefile
	$(TEXI2HTML) --set-customization-variable 'HIGHLIGHT_SYNTAX highlight' '$(call SHESCAPE,$<)' -o $@

.PHONY: dvi
dvi: ironclad.dvi

ironclad.dvi: $(call MKESCAPE,$(SRCDIR))/docs/ironclad.texi GNUmakefile
	$(TEXI2DVI) '$(call SHESCAPE,$<)' -o $@
###############################################################################
# Rules for checks and formal verification.
.PHONY: check
check: check-typos check-rts check-kernel

.PHONY: check-typos
check-typos:
	$(TYPOS) -c '$(call SHESCAPE,$(SRCDIR))'/.typos.toml '$(call SHESCAPE,$(SRCDIR))'

.PHONY: check-rts
check-rts: rtsdir/adalib/libgnat.a
	$(GNATPROVE) -P ./rts.gpr \
		-U --level=4 --mode=all --counterexamples=on \
		-j$(PARALLELISM)

.PHONY: check-rts-stone
check-rts-stone: rtsdir/adalib/libgnat.a
	$(GNATPROVE) -P ./rts.gpr \
		-U --level=4 --mode=stone -j$(PARALLELISM)

.PHONY: check-kernel
check-kernel: rtsdir/adalib/libgnat.a
	$(GNATPROVE) -P ./ironclad.gpr \
		--RTS=./rtsdir -U --level=4 --mode=all --counterexamples=on \
		-j$(PARALLELISM)

.PHONY: check-kernel-stone
check-kernel-stone: rtsdir/adalib/libgnat.a
	$(GNATPROVE) -P ./ironclad.gpr \
		--RTS=./rtsdir --level=4 --mode=stone -j$(PARALLELISM)
###############################################################################
# Rules for cleaning build and configuration artifacts.
.PHONY: clean
clean:
	rm -rf $(OUTPUT) obj gnatprove rtsdir \
		ironclad.info ironclad.html ironclad.dvi ironclad.log ironclad.toc \
		ironclad.aux

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile ironclad.gpr rts.gpr gprconfig/*.xml

.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf configure build-aux *'~' autom4te.cache freestnd-c-hdrs cc-runtime flanterm uacpi
###############################################################################
# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(DIST_OUTPUT)"
	$(MKDIR_P) "$(DIST_OUTPUT)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(DIST_OUTPUT)"/
	cd "$(DIST_OUTPUT)" && git checkout .
	cd "$(DIST_OUTPUT)" && ./bootstrap
	rm -rf "$(DIST_OUTPUT)"/.well-known
	rm -rf "$(DIST_OUTPUT)"/.git
	rm -rf "$(DIST_OUTPUT)"/.gitignore
	rm -rf "$(DIST_OUTPUT)"/.mailmap
	rm -rf "$(DIST_OUTPUT)"/.forgejo
	rm -rf "$(DIST_OUTPUT)"/autom4te.cache
	rm -rf "$(DIST_OUTPUT)"/cc-runtime/.git
	rm -rf "$(DIST_OUTPUT)"/freestnd-c-hdrs/.git
	rm -rf "$(DIST_OUTPUT)"/flanterm/.git
	rm -rf "$(DIST_OUTPUT)"/flanterm/.gitignore
	rm -rf "$(DIST_OUTPUT)"/uacpi/.git
	rm -rf "$(DIST_OUTPUT)"/uacpi/.github
	rm -rf "$(DIST_OUTPUT)"/uacpi/.gitignore
	rm -rf "$(DIST_OUTPUT)"/uacpi/tests
	echo "$(PACKAGE_VERSION)" >"$(DIST_OUTPUT)"/version
	tar -zcf "$(DIST_OUTPUT)".tar.gz "$(DIST_OUTPUT)"
	rm -rf "$(DIST_OUTPUT)"
###############################################################################
# Install artifacts and other files to their final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(infodir))'
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
	$(INSTALL_DATA) $(OUTPUT) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)/'
	$(INSTALL_DATA) ironclad.info '$(call SHESCAPE,$(DESTDIR)$(infodir))/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)/$(OUTPUT)'
###############################################################################
# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -rf '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
	rm -f '$(call SHESCAPE,$(DESTDIR)$(infodir))/ironclad.info'
